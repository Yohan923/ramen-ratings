[{"C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\index.js":"1","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\reportWebVitals.js":"2","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\App.js":"3","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\charts\\map\\index.js":"4","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\charts\\chart\\histogram.js":"5","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\charts\\chart\\barchart.js":"6","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\charts\\chart\\list.js":"7","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\charts\\chart\\bubble.js":"8","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\button.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":1607,"mtime":1608826405554,"results":"13","hashOfConfig":"11"},{"size":4511,"mtime":1608825549315,"results":"14","hashOfConfig":"11"},{"size":2768,"mtime":1608825672884,"results":"15","hashOfConfig":"11"},{"size":3954,"mtime":1608825676084,"results":"16","hashOfConfig":"11"},{"size":1070,"mtime":1608825681063,"results":"17","hashOfConfig":"11"},{"size":4277,"mtime":1608828050363,"results":"18","hashOfConfig":"11"},{"size":322,"mtime":1608821059799,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1gybj8i",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"22"},"C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\index.js",[],["46","47"],"C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\reportWebVitals.js",[],"C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\App.js",["48","49","50","51","52"],"import React, { useEffect, useState, useRef } from 'react';\nimport { Layout } from 'antd';\nimport Map from './charts/map/index';\nimport Histogram from \"./charts/chart/histogram\";\nimport BarChart from \"./charts/chart/barchart\";\nimport L from \"./charts/chart/list\";\nimport Bubble from \"./charts/chart/bubble\";\nimport Button from \"./button\";\nimport './App.css';\nconst { Sider, Content, Footer } = Layout;\n\n\nfunction App() {\n  const [clickedCountry, setCountry] = useState('China')\n\n  return (\n    <div className=\"App\">\n      <div className='charts'>\n        <Histogram clickedCountry={clickedCountry}/>\n        <Bubble clickedCountry={clickedCountry}/>\n        <BarChart clickedCountry={clickedCountry}/>\n        <L clickedCountry={clickedCountry}/>\n      </div>\n      <div style={{ width: '100%', borderStyle: 'groove'}} className='map'>\n        <div className='leftBox'>\n          <div style={{borderStyle: 'solid', marginBottom: '10px', textAlign: 'center', verticalAlign: 'middle', padding: '10px 5px'}}>Currently showing data for {clickedCountry !== 'world'? clickedCountry : 'all countries'}</div>\n          <Button handler={setCountry}></Button>\n        </div>\n       <Map handler={setCountry}></Map>\n       <div className='legend'>\n         <div>\n           Number of ramen products\n         </div>\n        <div className='box'> \n        <div>\n          352\n        </div>\n        <div>\n          1\n          </div>\n        </div>\n        <div>No Data</div>\n        <div style={{height: '30px', backgroundColor:'grey'}}>\n        </div>\n       </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\charts\\map\\index.js",["53","54","55","56","57","58","59","60","61","62"],"import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { geoMercator, geoPath, scaleDiverging, svg } from 'd3';\r\n\r\nvar Color = require('color');\r\nvar mapData = require('../../data/combined_geo.json');\r\nvar all_data = require('../../data/country_data.json');\r\n\r\n\r\n\r\nconst Map = (props) => {\r\n  var data = mapData.features;\r\n  const svgRef = useRef();\r\n  const projection = geoMercator().fitSize([900, 600], mapData).precision(100)\r\n  const pathGenerator = geoPath().projection(projection);\r\n\r\n  // set the dimensions and margins of the graph\r\n var margin = {top: 0, right: 30, bottom: 0, left: 40},\r\n width = 900,\r\n height = 600;\r\n\r\n  useEffect(() => {\r\n\r\n    var tooltip = d3.select(svgRef.current)\r\n    .append(\"div\")\r\n      .style(\"opacity\", 0)\r\n      .attr(\"class\", \"tooltip\")\r\n      .style(\"background-color\", \"black\")\r\n      .style(\"border-radius\", \"5px\")\r\n      .style(\"padding\", \"10px\")\r\n      .style(\"color\", \"white\")\r\n      .style(\"position\", \"absolute\")\r\n\r\n      // -2- Create 3 functions to show / update (when mouse move but stay on same circle) / hide the tooltip\r\n  var showTooltip = function(d, i) {\r\n  tooltip\r\n    .transition()\r\n    .duration(200)\r\n  tooltip\r\n    .style(\"opacity\", 1)\r\n    .html(\"Country \" + i.properties.ADMIN + \", \" + \"Number: \" + (i.num_ramen !== undefined? i.num_ramen: 0))\r\n    .style(\"left\", (d.x) + \"px\")\r\n    .style(\"top\", (d.y - 50) + \"px\")\r\n}\r\nvar moveTooltip = function(d) {\r\n  tooltip\r\n    .style(\"left\", (d.x) + \"px\")\r\n    .style(\"top\", (d.y - 50) + \"px\")\r\n}\r\nvar hideTooltip = function(d) {\r\n  tooltip\r\n    .transition()\r\n    .duration(200)\r\n    .style(\"opacity\", 0)\r\n}\r\n    \r\n    var svg = d3.select(svgRef.current)\r\n\r\n    const zoom = d3.zoom()\r\n    .on('zoom', (event) => {\r\n      map.attr('transform', event.transform);\r\n    })\r\n    .scaleExtent([1, 40]);\r\n\r\n    var map = svg.append(\"svg\")\r\n      .attr(\"width\", width + margin.left + margin.right)\r\n      .attr(\"height\", height + margin.top + margin.bottom)\r\n      .call(zoom)\r\n    .append(\"g\")\r\n      .attr(\"transform\",\r\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n    \r\n    map.append('g')\r\n    .selectAll('path')\r\n    .data(data)\r\n    .join('path')\r\n    .attr('class', 'country')\r\n    .attr('fill', feature => {\r\n      if (feature.num_ramen){\r\n        var luminance = (((352 - feature.num_ramen)/(352 - 1)) * 40)+40\r\n        return Color.hsl(120, 50, luminance)\r\n      }\r\n      else{\r\n        return 'grey'\r\n      }  \r\n    })\r\n    .attr('stroke', 'black')\r\n    .attr('d', feature => pathGenerator(feature))\r\n    .on('click', (event, feature) => {\r\n      if (all_data[feature.properties.ADMIN] !== undefined){\r\n        props.handler(feature.properties.ADMIN)\r\n      }else if (all_data[feature.properties.ISO_A3] !== undefined){\r\n        props.handler(feature.properties.ISO_A3)\r\n      }\r\n      \r\n    })\r\n    .on(\"mouseover\", showTooltip )\r\n    .on(\"mousemove\", moveTooltip )\r\n    .on(\"mouseleave\", hideTooltip )\r\n    .enter()\r\n    .append('path');\r\n\r\n\r\n    map.selectAll('text')\r\n    .data(data)\r\n    .enter().append(\"text\")\r\n    .attr('class', 'text')\r\n    .attr('d', feature => pathGenerator(feature))\r\n    .attr(\"x\", function(d) {\r\n      if (d.properties.ADMIN == 'United States of America'){\r\n        return pathGenerator.centroid(d)[0] + 15\r\n      }\r\n      else if (d.properties.ADMIN == 'Canada'){\r\n        return pathGenerator.centroid(d)[0] - 30\r\n      }\r\n      else{\r\n        return pathGenerator.centroid(d)[0] - 10;\r\n      }\r\n    })\r\n    .attr(\"y\", function(d) {\r\n      if (d.properties.ADMIN == 'United States of America'){\r\n        return pathGenerator.centroid(d)[1] + 40\r\n      }\r\n      else if (d.properties.ADMIN == 'Canada'){\r\n        return pathGenerator.centroid(d)[1] + 45\r\n      }\r\n      else{\r\n        return pathGenerator.centroid(d)[1];\r\n      }\r\n    })\r\n    .attr(\"font-size\", \"5px\")\r\n    .on('click', (event, feature) => {\r\n      if (all_data[feature.properties.ADMIN] !== undefined){\r\n        props.handler(feature.properties.ADMIN)\r\n      }else if (all_data[feature.properties.ISO_A3] !== undefined){\r\n        props.handler(feature.properties.ISO_A3)\r\n      }\r\n      \r\n    })\r\n    .on(\"mouseover\", showTooltip )\r\n    .on(\"mousemove\", moveTooltip )\r\n    .on(\"mouseleave\", hideTooltip )\r\n    .text(feature => {\r\n      return feature.num_ramen ? feature.properties.ADMIN : ''\r\n    });\r\n    \r\n  }, []);\r\n\r\n  return <div style={{ width: '970px', height: '600px'}} ref={svgRef}/>;\r\n};\r\n\r\nexport default Map;\r\n","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\charts\\chart\\histogram.js",["63","64","65"],"import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nvar all_data = require('../../data/country_data.json');\r\n\r\nconst Histogram = (props) => {\r\n\r\n    const svgRef = useRef();\r\n    // set the dimensions and margins of the graph\r\n    var margin = {top: 10, right: 30, bottom: 30, left: 40},\r\n        width = 450,\r\n        height = 380;\r\n    useEffect(() => {\r\n        d3.select(svgRef.current).selectAll(\"*\").remove()\r\n    // append the svg object to the body of the page\r\n    var svg = d3.select(svgRef.current)\r\n    .append(\"svg\")\r\n        .attr(\"width\", width + margin.left + margin.right)\r\n        .attr(\"height\", height + margin.top + margin.bottom)\r\n    .append(\"g\")\r\n        .attr(\"transform\",\r\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n    \r\n    var data = all_data[props.clickedCountry].stars\r\n    var bins = d3.bin().thresholds([0, 1, 2, 3, 4, 5])(data)\r\n\r\n            var x = d3.scaleLinear()\r\n            .domain([0, 5])\r\n            .range([margin.left, width - margin.right])\r\n\r\n            var y = d3.scaleLinear()\r\n    .domain([0, d3.max(bins, d => d.length)]).nice()\r\n    .range([height - margin.bottom, margin.top])\r\n\r\n\r\n    var xAxis = g => g\r\n    .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n    .call(d3.axisBottom(x).ticks(width / 80 ).tickSizeOuter(0))\r\n    .call(g => g.append(\"text\")\r\n    .attr(\"x\", width - margin.right)\r\n    .attr(\"y\", 30)\r\n    .attr(\"fill\", \"currentColor\")\r\n    .attr(\"font-weight\", \"bold\")\r\n    .attr(\"text-anchor\", \"end\")\r\n        .text('Stars'))\r\n\r\n\r\n    svg.append(\"g\")\r\n    .attr(\"fill\", \"steelblue\")\r\n  .selectAll(\"rect\")\r\n  .data(bins)\r\n  .join(\"rect\")\r\n    .attr(\"x\", d => x(d.x0) + 1)\r\n    .attr(\"width\", d => Math.max(0, x(d.x1) - x(d.x0) - 1))\r\n    .attr(\"y\", d => y(d.length))\r\n    .attr(\"height\", d => y(0) - y(d.length));\r\n\r\n\r\n    var yAxis = g => g\r\n    .attr(\"transform\", `translate(${margin.left},0)`)\r\n    .call(d3.axisLeft(y).ticks(height / 40).tickSizeOuter(0))\r\n    .call(g => g.select(\".domain\"))\r\n    .call(g => g.select(\".tick:last-of-type text\").clone()\r\n    .attr(\"x\", -50)\r\n    .attr(\"y\", -15)\r\n        .attr(\"text-anchor\", \"start\")\r\n        .attr(\"font-weight\", \"bold\")\r\n        .text('Ramen products'))\r\n\r\nsvg.append(\"g\")\r\n    .call(xAxis);\r\n\r\nsvg.append(\"g\")\r\n    .call(yAxis);\r\n\r\n    // And apply this function to data to get the bins\r\n\r\n\r\n    }, [props.clickedCountry]);\r\n\r\n    return (\r\n        <div style={{flexGrow: '4', borderStyle: 'groove'}}>\r\n        <div style={{height: '30px' , fontWeight: 'bold', borderStyle: 'solid'}}>Distribution of ramen product ratings</div>\r\n        <div style={{ width: '600px', height: '400px' }} ref={svgRef}/>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Histogram;","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\charts\\chart\\barchart.js",["66","67","68"],"import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nvar all_data = require('../../data/country_data.json');\r\n\r\nconst BarChart = (props) => {\r\n\r\n    const svgRef = useRef();\r\n\r\n    var height = 380\r\n    var width = 450 \r\n\r\n    var margin = {top: 10, right: 30, bottom: 30, left: 40}\r\n\r\n    \r\n    useEffect(() => {\r\n      d3.select(svgRef.current).selectAll(\"*\").remove()\r\n\r\n      var svg = d3.select(svgRef.current)\r\n      .append(\"svg\")\r\n          .attr(\"width\", width + margin.left + margin.right)\r\n          .attr(\"height\", height + margin.top + margin.bottom)\r\n      .append(\"g\")\r\n          .attr(\"transform\",\r\n              \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n      var data = Object.values(all_data[props.clickedCountry].packagings)\r\n\r\n      var line = d3.line()\r\n      .x(d => x(d.name) + x.bandwidth() / 2)\r\n      .y(d => y2(d.average))\r\n      \r\n      var x = d3.scaleBand()\r\n      .domain(data.map(d => d.name))\r\n      .rangeRound([margin.left, width - margin.right])\r\n      .padding(0.1)\r\n  \r\n      var y1 = d3.scaleLinear()\r\n      .domain([0, d3.max(data, d => d.num)])\r\n      .rangeRound([height - margin.bottom, margin.top])\r\n      \r\n  \r\n      var y2 = d3.scaleLinear()\r\n      .domain(d3.extent(data, d => d.average))\r\n      .rangeRound([height - margin.bottom, margin.top])\r\n  \r\n      var xAxis = g => g\r\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n      .call(d3.axisBottom(x)\r\n          .tickSizeOuter(0))\r\n          .call(g => g.append(\"text\")\r\n          .attr(\"x\", width - margin.right)\r\n          .attr(\"y\", 30)\r\n          .attr(\"fill\", \"currentColor\")\r\n          .attr(\"font-weight\", \"bold\")\r\n          .attr(\"text-anchor\", \"end\")\r\n          .text('Packaging style'))\r\n  \r\n          var y1Axis = g => g\r\n      .attr(\"transform\", `translate(${margin.left},0)`)\r\n      .call(d3.axisLeft(y1).ticks(null, \"s\"))\r\n      .call(g => g.select(\".domain\"))\r\n      .call(g => g.append(\"text\")\r\n          .attr(\"x\", -margin.left)\r\n          .attr(\"y\", 0)\r\n          .attr(\"font-weight\", \"bold\")\r\n          .attr(\"fill\", \"currentColor\")\r\n          .attr(\"text-anchor\", \"start\")\r\n          .text('Number of ramen products'))\r\n  \r\n          var y2Axis = g => g\r\n      .attr(\"transform\", `translate(${width - margin.right},0)`)\r\n      .call(d3.axisRight(y2))\r\n      .call(g => g.select(\".domain\"))\r\n      .call(g => g.append(\"text\")\r\n          .attr(\"x\", margin.right)\r\n          .attr(\"y\", 0)\r\n          .attr(\"font-weight\", \"bold\")\r\n          .attr(\"fill\", \"currentColor\")\r\n          .attr(\"text-anchor\", \"end\")\r\n          .text('Average Stars'))\r\n\r\n  svg.append(\"g\")\r\n      .attr(\"fill\", \"steelblue\")\r\n      .attr(\"fill-opacity\", 0.8)\r\n    .selectAll(\"rect\")\r\n    .data(data)\r\n    .join(\"rect\")\r\n      .attr(\"x\", d => x(d.name))\r\n      .attr(\"width\", x.bandwidth())\r\n      .attr(\"y\", d => y1(d.num))\r\n      .attr(\"height\", d => y1(0) - y1(d.num));\r\n\r\n  svg.append(\"path\")\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"currentColor\")\r\n      .attr(\"stroke-miterlimit\", 1)\r\n      .attr(\"stroke-width\", 3)\r\n      .attr(\"d\", line(data));\r\n\r\n  svg.append(\"g\")\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"pointer-events\", \"all\")\r\n    .selectAll(\"rect\")\r\n    .data(data)\r\n    .join(\"rect\")\r\n      .attr(\"x\", d => x(d.name))\r\n      .attr(\"width\", x.bandwidth())\r\n      .attr(\"y\", 0)\r\n      .attr(\"height\", height)\r\n    .append(\"title\")\r\n      .text('helloWorld');\r\n\r\n  svg.append(\"g\")\r\n      .call(xAxis);\r\n\r\n  svg.append(\"g\")\r\n      .call(y1Axis);\r\n\r\n  svg.append(\"g\")\r\n      .call(y2Axis);\r\n    \r\n\r\n    }, [props.clickedCountry]);\r\n\r\n    return (<div style={{flexGrow: '4', borderStyle: 'groove'}}>\r\n      <div style={{height: '30px' , fontWeight: 'bold', borderStyle: 'solid'}}>The number of ramen and average rating of packaging styles</div>\r\n      <div style={{ width: '600px', height: '400px'}} ref={svgRef}/>\r\n    </div>);\r\n\r\n}\r\n\r\nexport default BarChart;","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\charts\\chart\\list.js",["69"],"import React, { Component } from \"react\";\r\n\r\nvar all_data = require('../../data/country_data.json');\r\n\r\n\r\nconst L = (props) => {\r\n\r\n    const returnText = () =>{\r\n        if (all_data[props.clickedCountry].top_10s.length > 0){\r\n            return all_data[props.clickedCountry].top_10s.map(({ Brand, Variety, Stars}) => {\r\n                return (\r\n                    <div className=\"item\">\r\n                      Brand: {Brand},\r\n                      Variety: {Variety},\r\n                      Rating: {Stars}\r\n                    </div>\r\n                );\r\n              })\r\n        }else{\r\n            return 'No products has been featured here'\r\n        }\r\n    }\r\n\r\n    return (\r\n      <div style={{flexGrow: '1', borderStyle: 'groove'}} className=\"L\">\r\n          <div style={{height: '30px' , fontWeight: 'bold', borderStyle: 'solid'}}>Products that has been ranked top 10 in the past</div>\r\n          <div style={{height: '400px', overflow: 'auto'}} className=\"scroll\">\r\n            {returnText()}\r\n          </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default L;","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\charts\\chart\\bubble.js",["70","71","72","73","74","75","76"],"import React, { useState, useEffect, useRef, useMemo, Component} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nvar all_data = require('../../data/country_data.json');\r\n\r\nconst Bubble = (props) => {\r\n\r\n    const svgRef = useRef();\r\n    const divRef = useRef();\r\n    useEffect(() => {\r\n      d3.select(svgRef.current).selectAll(\"*\").remove()\r\n\r\n// set the dimensions and margins of the graph\r\n var margin = {top: 10, right: 30, bottom: 30, left: 40},\r\n    width = 450,\r\n    height = 380;\r\n\r\n// append the svg object to the body of the page\r\nvar svg = d3.select(svgRef.current)\r\n  .append(\"svg\")\r\n    .attr(\"width\", width + margin.left + margin.right)\r\n    .attr(\"height\", height + margin.top + margin.bottom)\r\n  .append(\"g\")\r\n    .attr(\"transform\",\r\n          \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n    \r\n    var data = Object.values(all_data[props.clickedCountry].brands)\r\n\r\n    \r\n    var tooltip = d3.select(svgRef.current)\r\n    .append(\"div\")\r\n      .style(\"opacity\", 0)\r\n      .attr(\"class\", \"tooltip\")\r\n      .style(\"background-color\", \"black\")\r\n      .style(\"border-radius\", \"5px\")\r\n      .style(\"padding\", \"10px\")\r\n      .style(\"color\", \"white\")\r\n      .style(\"position\", \"absolute\")\r\n  // Add X axis\r\n  var x = d3.scaleLinear()\r\n    .domain([0, Math.ceil(Math.max.apply(Math, data.map(function(o) { return o.num; }))/10)*10])\r\n    .range([margin.left, width - margin.right]);\r\n\r\n\r\n\r\n  // Add Y axis\r\n  var y = d3.scaleLinear()\r\n    .domain([0, 5])\r\n    .range([height - margin.bottom, margin.top]);\r\n\r\n\r\n    var xAxis = g => g\r\n    .call(d3.axisBottom(x))\r\n    .call(g => g.append(\"text\")\r\n        .attr(\"x\", width - margin.right)\r\n        .attr(\"y\", 30)\r\n        .attr(\"fill\", \"currentColor\")\r\n        .attr(\"font-weight\", \"bold\")\r\n        .attr(\"text-anchor\", \"end\")\r\n        .text('Number of products'))\r\n\r\n  var yAxis = g => g\r\n\r\n    .call(d3.axisLeft(y))\r\n    .call(g => g.select(\".domain\"))\r\n    .call(g => g.select(\".tick:last-of-type text\").clone()\r\n        .attr(\"x\", -50)\r\n        .attr(\"y\", -15)\r\n        .attr(\"text-anchor\", \"start\")\r\n        .attr(\"font-weight\", \"bold\")\r\n        .text('Average Stars'))\r\n\r\n        svg.append(\"g\")\r\n        .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n        .call(xAxis);\r\n\r\n        svg.append(\"g\")\r\n        .attr(\"transform\", `translate(${margin.left},0)`)\r\n        .call(yAxis);\r\n\r\n  // Add a scale for bubble size\r\n  var z = d3.scaleLinear()\r\n    .domain([1, 400])\r\n    .range([ 5, 40]);\r\n\r\n  // Add a scale for bubble color\r\n  var myColor = d3.scaleOrdinal()\r\n    .domain(data.map(d => d.name))\r\n    .range(d3.schemeSet2);\r\n\r\n  // -1- Create a tooltip div that is hidden by default:\r\n\r\n\r\n  // -2- Create 3 functions to show / update (when mouse move but stay on same circle) / hide the tooltip\r\n  var showTooltip = function(d, i) {\r\n      var tmp =d3.pointer(d)\r\n    tooltip\r\n      .transition()\r\n      .duration(200)\r\n    tooltip\r\n      .style(\"opacity\", 1)\r\n      .html(\"Brand: \" + i.name + \", \" + \"Number: \" + i.num + \", \" + \"Average: \" + i.average)\r\n      .style(\"left\", (d.x) + \"px\")\r\n      .style(\"top\", (d.y - 50) + \"px\")\r\n  }\r\n  var moveTooltip = function(d) {\r\n    tooltip\r\n      .style(\"left\", (d.x) + \"px\")\r\n      .style(\"top\", (d.y - 50) + \"px\")\r\n  }\r\n  var hideTooltip = function(d) {\r\n    tooltip\r\n      .transition()\r\n      .duration(200)\r\n      .style(\"opacity\", 0)\r\n  }\r\n\r\n  // Add dots\r\n  svg.append('g')\r\n    .selectAll(\"dot\")\r\n    .data(data)\r\n    .enter()\r\n    .append(\"circle\")\r\n      .attr(\"class\", \"bubbles\")\r\n      .attr(\"cx\", function (d) { return x(d.num); } )\r\n      .attr(\"cy\", function (d) { return y(d.average); } )\r\n      .attr(\"r\", function (d) { return z(d.num); } )\r\n      .style(\"fill\", function (d) { return myColor(d.name); } )\r\n    // -3- Trigger the functions\r\n    .on(\"mouseover\", showTooltip )\r\n    .on(\"mousemove\", moveTooltip )\r\n    .on(\"mouseleave\", hideTooltip )\r\n\r\n    }, [props.clickedCountry]);\r\n\r\n    return (\r\n      <div style={{flexGrow: '4', borderStyle: 'groove'}}>\r\n              <div style={{height: '30px' , fontWeight: 'bold', borderStyle: 'solid'}}>Distribution of ramen product brands</div>\r\n              <div style={{ width: '600px', height: '400px' }} ref={svgRef}>\r\n    </div>\r\n      </div>\r\n);\r\n\r\n}\r\n\r\nexport default Bubble","C:\\Users\\john\\Desktop\\data_vis\\ass_3\\ramen_dashboard\\src\\button.js",["77"],"import React, { Component } from \"react\";\r\n\r\n\r\nconst Button = (props) => {\r\n\r\n    const change = () => {\r\n        props.handler('world')\r\n    }\r\n\r\n    return (\r\n        <button style={{ width: '100px', height: '100px'}} onClick={change}>Click me to show data for all countries</button>\r\n    );\r\n}\r\n\r\nexport default Button;",{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":26},{"ruleId":"82","severity":1,"message":"86","line":1,"column":38,"nodeType":"84","messageId":"85","endLine":1,"endColumn":44},{"ruleId":"82","severity":1,"message":"87","line":10,"column":9,"nodeType":"84","messageId":"85","endLine":10,"endColumn":14},{"ruleId":"82","severity":1,"message":"88","line":10,"column":16,"nodeType":"84","messageId":"85","endLine":10,"endColumn":23},{"ruleId":"82","severity":1,"message":"89","line":10,"column":25,"nodeType":"84","messageId":"85","endLine":10,"endColumn":31},{"ruleId":"82","severity":1,"message":"90","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"91","line":1,"column":46,"nodeType":"84","messageId":"85","endLine":1,"endColumn":53},{"ruleId":"82","severity":1,"message":"92","line":3,"column":32,"nodeType":"84","messageId":"85","endLine":3,"endColumn":46},{"ruleId":"82","severity":1,"message":"93","line":3,"column":48,"nodeType":"84","messageId":"85","endLine":3,"endColumn":51},{"ruleId":"94","severity":1,"message":"95","line":41,"column":50,"nodeType":"96","messageId":"97","endLine":41,"endColumn":51},{"ruleId":"98","severity":1,"message":"99","line":111,"column":30,"nodeType":"96","messageId":"100","endLine":111,"endColumn":32},{"ruleId":"98","severity":1,"message":"99","line":114,"column":35,"nodeType":"96","messageId":"100","endLine":114,"endColumn":37},{"ruleId":"98","severity":1,"message":"99","line":122,"column":30,"nodeType":"96","messageId":"100","endLine":122,"endColumn":32},{"ruleId":"98","severity":1,"message":"99","line":125,"column":35,"nodeType":"96","messageId":"100","endLine":125,"endColumn":37},{"ruleId":"101","severity":1,"message":"102","line":148,"column":6,"nodeType":"103","endLine":148,"endColumn":8,"suggestions":"104"},{"ruleId":"82","severity":1,"message":"90","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"91","line":1,"column":46,"nodeType":"84","messageId":"85","endLine":1,"endColumn":53},{"ruleId":"101","severity":1,"message":"105","line":79,"column":8,"nodeType":"103","endLine":79,"endColumn":30,"suggestions":"106"},{"ruleId":"82","severity":1,"message":"90","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"91","line":1,"column":46,"nodeType":"84","messageId":"85","endLine":1,"endColumn":53},{"ruleId":"101","severity":1,"message":"105","line":123,"column":8,"nodeType":"103","endLine":123,"endColumn":30,"suggestions":"107"},{"ruleId":"82","severity":1,"message":"108","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":26},{"ruleId":"82","severity":1,"message":"90","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"91","line":1,"column":46,"nodeType":"84","messageId":"85","endLine":1,"endColumn":53},{"ruleId":"82","severity":1,"message":"108","line":1,"column":55,"nodeType":"84","messageId":"85","endLine":1,"endColumn":64},{"ruleId":"82","severity":1,"message":"109","line":9,"column":11,"nodeType":"84","messageId":"85","endLine":9,"endColumn":17},{"ruleId":"82","severity":1,"message":"110","line":96,"column":11,"nodeType":"84","messageId":"85","endLine":96,"endColumn":14},{"ruleId":"94","severity":1,"message":"95","line":102,"column":39,"nodeType":"96","messageId":"97","endLine":102,"endColumn":40},{"ruleId":"94","severity":1,"message":"95","line":102,"column":67,"nodeType":"96","messageId":"97","endLine":102,"endColumn":68},{"ruleId":"82","severity":1,"message":"108","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":26},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'Sider' is assigned a value but never used.","'Content' is assigned a value but never used.","'Footer' is assigned a value but never used.","'useState' is defined but never used.","'useMemo' is defined but never used.","'scaleDiverging' is defined but never used.","'svg' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","eqeqeq","Expected '===' and instead saw '=='.","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data', 'height', 'margin.bottom', 'margin.left', 'margin.right', 'margin.top', 'pathGenerator', 'props', and 'width'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["113"],"React Hook useEffect has missing dependencies: 'height', 'margin.bottom', 'margin.left', 'margin.right', 'margin.top', and 'width'. Either include them or remove the dependency array.",["114"],["115"],"'Component' is defined but never used.","'divRef' is assigned a value but never used.","'tmp' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"118","fix":"120"},"Update the dependencies array to be: [data, height, margin.bottom, margin.left, margin.right, margin.top, pathGenerator, props, width]",{"range":"121","text":"122"},"Update the dependencies array to be: [height, margin.bottom, margin.left, margin.right, margin.top, props.clickedCountry, width]",{"range":"123","text":"124"},{"range":"125","text":"124"},[4402,4404],"[data, height, margin.bottom, margin.left, margin.right, margin.top, pathGenerator, props, width]",[2409,2431],"[height, margin.bottom, margin.left, margin.right, margin.top, props.clickedCountry, width]",[3600,3622]]